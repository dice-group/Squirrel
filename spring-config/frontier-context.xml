<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop.xsd
                            http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx.xsd
                            http://www.springframework.org/schema/util
                  			http://www.springframework.org/schema/util/spring-util.xsd">


	<context:component-scan
		base-package="org.dice_research.squirrel" />

	<!-- This will automatically locate any and all property files you have 
		within your classpath, provided they fall under the META-INF directory. The 
		located property files are parsed and their values can then be used within 
		application context files in the form of ${propertyKey}. -->



	<bean id="serializerBean"
		class="org.dice_research.squirrel.data.uri.serialize.java.GzipJavaUriSerializer" />

	<bean id="normalizerBean"
		class="org.dice_research.squirrel.data.uri.norm.NormalizerImpl">
		<constructor-arg index="0">
			<list>
				<value>sessionid</value>
				<value>jsessionids</value>
				<value>phpsessid</value>
				<value>sid</value>
			</list>
		</constructor-arg>
		<constructor-arg index="1">
			<map>
				<entry key="http" value="80" />
				<entry key="https" value="443" />
				<entry key="ftp" value="21" />
				<entry key="ftps" value="90" />
				<entry key="sftp" value="22" />
			</map>
		</constructor-arg>

	</bean>



	<bean id="queueBean"
		class="org.dice_research.squirrel.queue.ipbased.MongoDBIpBasedQueue">
		<constructor-arg index="0"
			value="#{systemEnvironment['MDB_HOST_NAME']}" />
		<constructor-arg index="1"
			value="#{systemEnvironment['MDB_PORT']}" />
		<constructor-arg index="2" ref="serializerBean" />
		<constructor-arg index="3" value="true" />
	</bean>


	<bean id="UriFilterBean"
		class="org.dice_research.squirrel.data.uri.filter.UriFilterConfigurator">
		<constructor-arg index="0" ref="mongoDBKnowUriFilter" />
		<constructor-arg index="1">
			<list>
				<!-- <ref bean="depthFilter" /> -->
			</list>
		</constructor-arg>
		<constructor-arg index="2" value="OR" />
	</bean>

	<!-- Triple Store sparql implementation -->
	<bean id="uriRetrieverBean"
		class="org.dice_research.squirrel.frontier.recrawling.SparqlBasedOutDatedUriRetriever" factory-method="create">
		<constructor-arg index="0"
			value="#{systemEnvironment['SPARQL_URL']}" />
		<constructor-arg index="1"
			value="#{systemEnvironment['SPARQL_HOST_USER']}" />
		<constructor-arg index="2"
			value="#{systemEnvironment['SPARQL_HOST_PASSWD']}" />
	</bean>
	
	<!-- Dummy UriRetriever Implementation
	<bean id="uriRetrieverBean"
		class="org.dice_research.squirrel.frontier.recrawling.DummyUriRetriever">
	</bean> -->
	
	


	<bean id="mongoDBKnowUriFilter"
		class="org.dice_research.squirrel.data.uri.filter.MongoDBKnowUriFilter">
		<constructor-arg index="0"
			value="#{systemEnvironment['MDB_HOST_NAME']}" />
		<constructor-arg index="1"
			value="#{systemEnvironment['MDB_PORT']}" />

	</bean>


	<bean id="depthFilter"
		class="org.dice_research.squirrel.data.uri.filter.DepthFilter">
		<constructor-arg index="0" value="3" />
	</bean>



	<bean id="domainGeneratorBean"
		class="org.dice_research.squirrel.data.uri.norm.DomainBasedUriGenerator" />

	<bean id="wellKnownVariantGeneratorBean"
		class="org.dice_research.squirrel.data.uri.norm.WellKnownPathUriGenerator" />



</beans>
