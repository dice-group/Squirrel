<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns="http://www.springframework.org/schema/beans"
	   xsi:schemaLocation=" http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd">


	<context:component-scan
		base-package="org.dice_research.squirrel" />

	<!-- This will automatically locate any and all property files you have
		within your classpath, provided they fall under the META-INF directory. The
		located property files are parsed and their values can then be used within
		application context files in the form of ${propertyKey}. -->



	<!-- <bean id="workerImpl" class="org.aksw.simba.squirrel.worker.impl.WorkerImpl"></bean> -->

	<bean id="workerBean"
		  class="org.dice_research.squirrel.worker.impl.WorkerImpl">
		<constructor-arg index="0" ref="workerComponent" />
		<constructor-arg index="1" ref="fetcherBean" />
		<constructor-arg index="2" ref="sinkBean" />
		<constructor-arg index="3" ref="analyzerBean" />
		<constructor-arg index="4" ref="robotsManagerBean" />
		<constructor-arg index="5" ref="serializerBean" />
		<constructor-arg index="6" ref="uriCollectorBean" />
		<constructor-arg index="7" value="2000" />
		<constructor-arg index="8"
						 value="#{systemEnvironment['OUTPUT_FOLDER']}/log" /><!-- Logging -->
		<constructor-arg index="9" value="false" /><!-- Logging -->
	</bean>

	<bean id="analyzerBean"	class="org.dice_research.squirrel.analyzer.manager.SimpleAnalyzerManager">
		<constructor-arg index="0">
			<list>
				<ref bean="ckananalyzerBean"/>
				<ref bean="rdfAnalyzerBean"/>
				<ref bean="htmlscraperanalyzerBean"/>
				<ref bean="microdataanalyzerBean"/>
				<ref bean="microformatanalyzerBean"/>
				<ref bean="hdtanalyzerBean"/>


			</list>
		</constructor-arg>
	</bean>

	<!-- Analyzers Beans -->
	<bean id="rdfAnalyzerBean" class="org.dice_research.squirrel.analyzer.impl.RDFAnalyzer">
		<constructor-arg index="0" ref="uriCollectorBean" />
	</bean>

	<bean id="rdfaAnalyzerBean" class="org.dice_research.squirrel.analyzer.impl.RDFaAnalyzer">
		<constructor-arg index="0" ref="uriCollectorBean" />
	</bean>

	<bean id="microdataanalyzerBean" class="org.dice_research.squirrel.analyzer.impl.MicrodataAnalyzer">
		<constructor-arg index="0" ref="uriCollectorBean" />
	</bean>

	<bean id="microformatanalyzerBean" class="org.dice_research.squirrel.analyzer.impl.MicroformatMF2JAnalyzer">
		<constructor-arg index="0" ref="uriCollectorBean" />
	</bean>

	<bean id="hdtanalyzerBean" class="org.dice_research.squirrel.analyzer.impl.HDTAnalyzer">
		<constructor-arg index="0" ref="uriCollectorBean" />
	</bean>

	<bean id="htmlscraperanalyzerBean" class="org.dice_research.squirrel.analyzer.impl.html.scraper.HTMLScraperAnalyzer">
		<constructor-arg index="0" ref="uriCollectorBean" />
	</bean>

	<bean id="ckananalyzerBean" class="org.dice_research.squirrel.analyzer.impl.ckan.CkanJsonAnalyzer">
		<constructor-arg index="0" ref="uriCollectorBean" />
	</bean>


	<bean id="fetcherBean"
		  class="org.dice_research.squirrel.fetcher.manage.SimpleOrderedFetcherManager">
		<constructor-arg>
			<list>
				<ref bean="sparqlFetcherBean" />
				<ref bean="ckanFetcherBean" />
				<ref bean="httpFetcherBean" />
				<ref bean="ftpFetcherBean" />
				<ref bean="sparqlDatasetFetcherBean" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="httpFetcherBean"
		  class="org.dice_research.squirrel.fetcher.http.HTTPFetcher" />
	<bean id="ftpFetcherBean"
		  class="org.dice_research.squirrel.fetcher.ftp.FTPFetcher" />
	<bean id="sparqlFetcherBean"
		  class="org.dice_research.squirrel.fetcher.sparql.SparqlBasedFetcher" />
	<bean id="sparqlDatasetFetcherBean"
		  class="org.dice_research.squirrel.fetcher.sparql.SparqlDatasetFetcher">
		<constructor-arg index="0" value="20"></constructor-arg>
		<constructor-arg index="1" value="0"></constructor-arg>
		<constructor-arg index="2" value="10"></constructor-arg>
	</bean>
	<bean id="ckanFetcherBean"
		  class="org.dice_research.squirrel.fetcher.ckan.java.PaginatedCkanFetcher" />



	<!-- Output folder for FileBasedSink -->
	<bean id="outputFolderBean" class="java.io.File">
		<constructor-arg index="0"
						 value="#{systemEnvironment['OUTPUT_FOLDER']}" />
	</bean>

	<!-- File Based Sink implementation
	<bean id="sinkBean"
		class="org.dice_research.squirrel.sink.impl.file.FileBasedSink">
		<constructor-arg name="outputDirectory"
			ref="outputFolderBean" />
		<constructor-arg name="useCompression" value="false" />
	</bean>-->


	<!-- HDT File Based Sink implementation <bean id="sinkBean" class="org.dice_research.squirrel.sink.impl.hdt.HdtBasedSink">
		<constructor-arg name="outputDirectory" ref="outputFolderBean" /> </bean> -->

	<!-- Triple Store (JENA) Sink implementation -->
	<bean id="sinkBean" class="org.dice_research.squirrel.sink.impl.sparql.SparqlBasedSink" factory-method="create">
		<constructor-arg index="0" value="#{systemEnvironment['SPARQL_URL']}" />
		<constructor-arg index="1" value="#{systemEnvironment['SPARQL_HOST_USER']}" />
		<constructor-arg index="2" value="#{systemEnvironment['SPARQL_HOST_PASSWD']}" />
	</bean>
	<!-- <bean id="uriCollectorBean" class="org.dice_research.squirrel.collect.SimpleUriCollector"
		> <constructor-arg index="0" ref="serializerBean" /> </bean> -->
	<bean id="serializerBean"
		  class="org.dice_research.squirrel.data.uri.serialize.java.GzipJavaUriSerializer" />

	<bean id="uriCollectorBean"
		  class="org.dice_research.squirrel.collect.SqlBasedUriCollector">
		<constructor-arg index="0" ref="serializerBean" />
		<constructor-arg index="1" value="foundUris" />
	</bean>

	<bean id="robotsManagerBean"
		  class="org.dice_research.squirrel.robots.RobotsManagerImpl">
		<constructor-arg index="0" ref="simpleHttpFetcherBean" />
		<property name="defaultMinWaitingTime" value="100"></property>
	</bean>

	<bean id="simpleHttpFetcherBean"
		  class="crawlercommons.fetcher.http.SimpleHttpFetcher">
		<constructor-arg index="0" ref="userAgentBean" />
	</bean>

	<bean id="userAgentBean"
		  class="crawlercommons.fetcher.http.UserAgent">
		<constructor-arg index="0" value="Test" />
		<constructor-arg index="1" value="" />
		<constructor-arg index="2" value="" />
	</bean>

</beans>
